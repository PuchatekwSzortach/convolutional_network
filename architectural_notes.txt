performance script: 1.7 sec. Multilayer: 34sec

With a matrix approach to compute forward convolutions:
performance script: 2.8 sec. Multilayer: 54sec

Reworked matrix approach so that computations for all kernels are done with a single matrix multiplication.
Images are still processed in a loop
performance script: 2 sec. Multilayer: 29sec

get_preactivations() takes: 0.192sec (1.45%) -> to 0.08sec and 75% of that in creating matrices - which we can still optimize ^^

With all images at once:
performance script: 1.56 sec. Multilayer: 29sec - so multilayer without change

Reworked kernels update to use matrix multiplication
performance script: 0.925sec, multilayer: 15 sec

Bumped up performance script to take 4.5 sec

Reworked get_image_gradients() to use dot product for computations. For now gradients over each image and kernel
are done separately.

Performance script:
44sec

Reworked get_kernels_patches_matrix() to select 2D patch without loop.
Performance script takes 34 sec, multilayer 1min 51sec

Changed get_kernels_patches_matrix() to work on all kernel channels at once.
Performance script takes 20 sec, multilayer 1min 2sec

Changed get_kernels_patches_matrix() to work on all kernels and image channels at once. It still iterates over
y, x coordinates of image.
Performance script takes 2.7 sec, multilayer 8 sec

Bottlenecks:
- get_kernel_patches_matrix() - 1.31sec
- get_channel_wise_images_batches_patch_matrix() - 0.44sec
- get_images_batch_patches_matrix() - 0.56sec